INTRODUCTION TO SOFTWARE eNGINEERING
--------------------------------------
Course outline 
------------------
->Introduction and background 
      -Software and its evolving  roles
      -Software Quality 
      -software myths
->The software process
      -Engineering in software 
      -process frameworks and patterns
      -overviews of process models and technology
      -overview of SE practices
->SE practice 1: system Engineering
     -Reverse Engineering
     -A look ahead at OO and SOA techniques
->SE Practice 11: Requirements Engineering and the analysis Model
     -formal methods
     -Clean-room SE
     -Components Based Development
     -commercial Off-The-Shelf(COTS) development
->SE practice III :Design Engineering and the architectural artefacts
                  -Design models, 
                  -System architectural designs
                  -Database schemas
->SE practical IV: User interface Design
               -General User Interface Designs
->Software Engineering - the systematic application of engineering 
                         approached/techniques to the development of software.
                       - Engineering branch associated with development of software products
                         using well-defined scientific principles, methods and procedures.
                       - Results into efficient and reliable software products(high quality software products)
                       
             
      Chapter 1
     ---------------
 -what is a software 
            Computer programs - that when executed provide desired feature.
            data structure - that enable a programs to adequately manipulate input values
            Documentation - that describes the operation and use of  the programs
            
            
-Software product
               -may be developed for a particular customer or general market
               -classified into: 
                               Generic-developed  to be sold to a range of different customers
                                      -stand-alone systems
                                      -marketed and sold to any customer
                                      -ie Graphics programs, project management tools, CAD software,
                                      
                               Bespoke- developed for a single customer according to their specification.
                                      -customized products
                                      - embedded control systems, air traffic control software, traffic monitoring systems.
                                      

-Changing nature of software
              -system software
              -applicatio software
              -engineering /scientific software
              -Embedded /mobile software 
              -product-line software
              -web application software
              -Aritficial intelligence software
              -
-Legacy systems  $ quality
             -many ligacy (old) systems remains supportive to core business functions and they are indispensable to the business.
             -Unfortunately, poor quality is a problem 
             -inextensible designs
             -convoluted code
             -poor documentation
             -poor test strategies and cases
             -poor change management
                         
-Software myths
             -existing  standard and procedures will sufice
             -more programmers = more progress
             -outsourcing removes responsibility
             -General(draft) requirements are enough to start the projects with.
             -program is done when it is finished
             -Quality can only be assessed at the end
             -only the working program need be delivered
             -software  engineering is too rigorous and bureaucratic and will only slow down.
             
-what is software engineering 
                  -the ultimate goal(driving motivation) is quality
                  -the main problem is complexity
                  -It about managing software development complexity
                  -unit contains 4 million line of code.
                  -Establishment and use of sound engineering principles in order to obtain economically produced software that is 
                   reliable and work efficiently on real machines.
                  -Should adopt a systematic $ organised approach to their work 
                  -should use appropriate tools and techniques depending on the:
                               the problem to be solved
                               the developement constaints
                               resource available.
-What is the difference between software engineering and computer science
------------------------------------------------------------------------------
               -computer science - theory
                                 -fundamentals
               -software engineering  - the practicality of development
                                      -delivery of useful software.
                                     
-Computer science theories - are currrently insufficient to act as a complete underprinning for software engineering,
                            it is the fundation for practical aspect of software engineering.
                            
                            
-What is the difference between software Engineering and system engineering
-------------------------------------------------------------------------
      -software engineering - part of system engineering.
      -system engineering - concerned with all aspects of computer-basesd systems development including 
                                                  hardware
                                                  software
                                                  process engineering
                         -involved in: 
                                  system specification
                                  architectural design
                                  integration and deployment
                               
                               
-Software engineering layers
------------------------------
-Quality focus - bedrock thst supports software engineering.
-process  - the gue that holds the technology layers together and enables rational and timely development.
-methods - the technic on how to build software
         - process establishes the context in which methods  are applied
      
-tools - provides automated or semi-automated support for the process and methods

SE Layers
----------
Quality focus -> process -> methods -> tools


process framework
---------------
-Establishes the foundation for a complete process by providing  a small number of  framework activities that are applicalbe to all 
 software projects.
-contains sets of ambrella activities that are applicable accross the entire software process.
-its activities is populated by a set of software engineering actions(a collections of related tasks that produces a major software engineering work product ie  analysis)
-its actions is populated with indidual work tasks that accomplish some part of th work implied by the actions.

Process definition
---------------
-process - defines who is doing what, when , and how to reach a certain goal

Generic process Frameworks
---------------------------
-communication
-planning
-modelling
-construction
-Deployment.

Communication
------------------
-involves heavy communication and collaboration with the customer(and other stakeholders)
-Encompasses requirements gathering and other related activities.

planning
-----------
-Describes;
    the technical tasks to be conducted,
    the risks that are likely , 
    the resource that will be required
    the work products to be producted and the work shedule.

Modelling 
-----------
-Encompasses the creation of models that allows the developer and the customer to better understand software requirement
and the design  that will achieve   those requirement.

constructions
------------
-combines the code generation(manuak and automated)
 and the testing that is required to ancover the errors in the code
 and to ensure that the implementation meet the requirement.
 
 Deployement
 ------------
 -The software (as a complete entity or as a partially completed increment) is delivered to the customer
 who evaluates the delivered product and prvides feedback based on the evaluation.
 
   
 umbrella activities
 ------------------------
 -Software project tracking and control
 -Risk management
 -Softeware management
 -Software quality assurance
 -Formal technical review
 -measurement
 -software configuration management.
 


Software process frameworks
-------------------------------
-A set of activities whose goals is the developemt of evalution of software.
-Generic activities in all software process 
      -specification -what the system should do and its development contraints
      -Development - production of the software systems
      -validation - checking that the software is what the customer wants
      -Evolution - Changing the software in response to changing demands.
  
A process meta-model
--------------------
-The capability maturity model integration(CMMI)
---------------------------------------------------
-meta-model
       -comprehensive  process
       -Developed by software engineering institute(SEI)
-predicate on the set of system and software enginneering capability that should be
 presented as organizations reach different levels of process capability and maturity
-To achieve this organistion should develop a process model that conforms to the CMMI guidelines.
-cmmi - presents a process meta-model in 2 different ways;
                                 continuous model
                                 staged model
       -defines each process area in terms of specific goals which establish characteristics  that must exist if the activites implied
        by rhe a process area area  to be affective.
-specific activities -  refines a goal into a set of process-related activities.

-cmmi continuous model - presented in  a two dimensional graphics
                           level 0 -incomplete
                           level 1 performed
                           level 2 managed
                           level 3 defined
                           level 4 quantitatively managed
                           level five optimized.
-CMMI - staged model - defines the same process areas, goals and practices as continuous model
                      main diffferent is that it defines five maturity levels rather than five capability level.
                      
                      
proccess patterns
------------------
-software process -  defined as  a collection of patterns that defines a set of activities, actions, work tasks, work products or related 
                     behaviour  required to develop computer software.
                     - provides a template - a consistent method for describing an important characteristic of the software process.

process assessment
--------------------
-standard CMMI assessment methods for process improvement(SCMPI)
-CMM-based appraisal for  internal process improvement(CBA IPI)
-

Personal $ Team process models
--------------------------------
-person software process(PSP)
       -emphasized personal measurement of both the work produced and its quality
       -five framework activities
                   planning
                   high-level design
                   high-level design review
                   development
                   post-mortem
-Team software process
      define element of the team process and activities that occur within the process.
      
processs technology
-------------------
-tools allows a software organisation to build n automated model of the common process framework, task, sets, and umbrella activities .
-the model can then be analyzed to determine typical workflow and examine alternative process structures.
-integrated combinations leads to CASE(computer aided software Engineering)


what is a CASE
--------------
-software system which are intended to provide automated support for software process activities ie
       requirement analysis
       system modelling
       Debugging
       Testing
       
-Upper-CASE
-----------
 -tools to support the early process activities of requirement and design.
 Lower-CASE
 ------------
 -tools to support later activities such as programming, debugging, and testing
 
 
 What are the costs of software engineering
 ------------------------------------------------
 -cost vary depending on the type of the system being developed and the requirements ie performancem and system reliability.
 -Distribution of costs depends on the developement model that is used.
 -software cost on a pc are often greater than the hardware cost
 
 
 Attributes of a good software
 ---------------------------
 -Should deliver the required functionality and performance to the user  
 -Should be maintainable, dependable and usable.
 -maintainable - software must evolve to meet changing needs
 -Dependability - software  must be trustworth
 -Efficienct - software should not make wasteful used of system resource
 Usability - Software must be usable by the users  for which  it was designed.
 
 
 key challenges facing software engineering 
 -------------------------------------------
 -Legacy systems - old, valuable systems must be maintained and update.
 -Heterogeneity - systems are distributed  and include a mix of hardware and software.
 -Delivery - there is  increasing  pressure for faster delivery of software.
 

 
 
 
    Chapter 2 
    ------------
    software Process(SP)
    -------------------------
    -software process models
    -process activities
    -plan-driven vs agile process 
    -Requirement Engineering
    -Design activities
    -Software Testing
    -Software Evolution
    
 -A structure set of activities required to develop a software system.
 -Different software process
                    Specification - defines what system should do.
                    Design and implementation - define the organization of the
                                               system and implementing the system
                    validation - checks that it does what the customer wants.
                  EVolution - changing  the system in response to changing  customer needs.
 -An abstract representation of a process.
 -It presents a description of a process from some particular perspective.
                       



software process description
---------------------------------
-Talks about the activities such as 
                 specifying a data  model,
                 designing a user interface
                 ordering of activities.
-Also include:
            Products, which are the outcomes of a process activity
            Roles, which reflect the responsibilities of the people in the process.
            Pre-and post-condition -Which are statement that are true before and after a process
            activity has been enacted or product produced.
            
            
            
            
        Plan-driven and agile process
        ---------------------------------
 -Processes where all of the process activities are planned in advance and
 progress is measure against this plan.
 -In agile processes, planning is incremental and it is easier  to change 
 the process to reflect changing customer requirement.
 -In practical, most practical processes
  include element of both plan-driven and agile approach.
 -There are no right or wrong software processes.
 


Software process models
--------------------------
-The waterfall model
 plan-driven model. Separate and distint phases of specification and development.
-Incremental developmentand
 specification, development validation are interleaved.
 may be plan-driven or agile.
-Reuse-oriented software engineering
 The system is assembled from existing component.
 may be plan driven or agile
 
 
 

Agile Methods and software maintenance
----------------------------------------
-Most organisation spend more on maintaining existing 
software than do on new software development.
-So if agile methods are to be successful, they have to
support maintence as well as organisation development.
-systems developed using  an agile approach mainatenance,
given the emphasis in the development process of minimizing formal documentions
-Can agile methods be used effectively for evolving a system in 
response to customer change request


Techical, human, organisation issues
--------------------------------------------
-Are the cultural or organisational issues that may affect the system development
-Traditional engineering  organisation 


Extreme programming(XP)
---------------------
-Perhaps the best-known and most used agile method.
-takes an extreme approach to iterative development.
-principle or practice
               -incremental planning
               -pair programming
               -collective ownerdship
               -continuous integration
               -sustainable base.
               
Testing in XP
-------------------
-Central to XP and XP hasdeveloped an approach.



Additional notes from the internet
--------------------------------------
Used case analysis
-----------------------
-Describe a real usage scenario
-point of view of the user
-Written as list, emphasizing end result and steps taken

.Use Case: record a sale onto  the Syste
.Role: sales staff
.main success scenario
 1.User initiates an "add sale" operation
 2.The software requests for the name and quantity of item sold
 3.the user inputs name and quantity, and confirms the action
 4.the software stores the new entry into the system.
 
 
.Extensions
   2.1 the user has input a quantity less than 1
   2.2 the software indicates to the user that the amount  is invalide
   2.3 the use case returns to step 2
   
   requirement analysis
   -------------------
   functional requirement
   non-functional requirement
     usually a characteristic or property of the system
     eg records must be retrieved within 3 seconds
     
 
prototypes
--------
-Build a (usually non-functional ) system that represents the visual layout and linkag of features
.

planning 
--------------
-modularization
  .one big part of planning 
  . how big program are broken down to small parts
  
-Cohesion - how much the elements of amodule are related
            measured in terms of tasks done or type of data handled
         - high cohesion - task are strongly related
         -low cohision - task dont  relate to each other
-coupling - the degree of dependence modules have among each other.
    
    
    
    Software process
    ----------------------
-Structured set of activities for software developement.

         fundamental aspects
           ------------------------
        -specification - defining what the software should do 
        - design - defining the organisation and the structure of the system
        - implementation and testing - programming the system and checking that it does what the customer wants
        -evalution - checking the system in response to changing customer needs
        -plan-driven processes are processes where all of the process activities are planned in  advanced and progrss  is measured against this plan
  
  
waterfall process
 ------- -------------
 -Brings development proces into a series of activities
    requirement definition
    system software design
    implementation  and unit testing
    integration and system testing
    operation and maintenance.
    
    
-problem with it is that - the is output in each of the phases , and if the is an 
a modification to be made, should be done in all the phases.
- only appropriate when the requirement are well-understood and changes limited 
 during the design process.
-Used in systems engineering projects where a system is developed at several sites
-th plan-driven nature of the waterfall model helps coordinate the work.


Agile process
---------------
-Based on incremental developmen where process activities are interleaved.
-Minimal documentation
-Aim is to be responsive to change and reduce the time required to deliver usedful functionality to user
-its benefits is that 
    - the cost of implementing changes  to customer requirement is reduced.
    -The amount of analysis and documentation that has to be refone is less than
    is required with waterfall model.
    -It is easier to get customers  feedback on the development work.
    -customers can comment on demonstrations of the software and see how much has bee implemented.
    -software products and apps
    -Business systems
-Its problems is that 
           -the process is  not visible 
           documents helps managers assess progress but in agile processes systems
           it is not cost-effective  to document every version of the system.
          -System structure tends to degrade as new increments are added.
           unless time and money is spent on refactoring to improve the software regular
           change usually corrupts its structure.
           
           
 integration and reuse
 -------------------------
 -systems are integrated from existing components or application systems.
 -Reused elements may be configured to adapt their behaviour and functionality to 
  user requirements.
  
 -stand-alone application systems that are configured for use in a particular environment.
 -reusable components that are intergrated with other reusable and specially writtent components.
 -Requirements are planned in advance but an iterative and agile approach can be taken to design and implementation.
 
  
   Attributes of a good software
   ------------------------------------
   -maintainable
   -dependable 
   -usable
   
   Software products
   ----------------------
   -Generic products 
   -Customiized products
   
   
   
   Frequently asked questions about software engineering 
   ----------------------------------------------------------
   -What is software
              -computer program and associate documentation.
              -software may be developed for particular custromer or may be developed for a general market
              
              
   -Attributes for a good software 
                -Should develiver functionality and performance to the user 
                -should be maintainable
                -dependable
                -usable
  -What is software engineering
                 -Engineering descipline that is  concerned with all aspects of software products.
                 
  -What are the fundamental software engineering activities
                 -software specification
                 -software development
                 -software validatation
                 -software evalution
                 
  -What is the difference between software engineering and computer science 
                 -computer science focus on theories and fundamentals
                 -Software engineering is concerned with the practicalities of developing and
                 delivering useful software
 -what is the difference between software  engineering and system engineering 
                -system engineering is concern with  all aspects  of computer based system 
                developement including hardware, software and process engineering.
                -software engineering is part of this more general process.

software engineering  -   
                      -engineering discipline 
                      -concerned with all aspect of software production
                      - ie  from the early stages  of system specification through  to mainaining the system after it has gone to use.
                      
-Engineering discipline - using appropriate theories and methods  to solve problems
                          bearing in mind  organisational  and financial contraints.
                          
                          
                          
                          General issues that affects most software
                          ------------------------------------------
      -Heterogeneity
      -Business and social changes
      -Security and trust
      
      
      
      
      
      
      Application types
      -----------------------------
      -Batch processsing systems
      -Entertainment system
      -system for modeling and simulation
      -stand alone applications
      -Interactive transaction-base applications
      -Embedded control systems
      -Data connection systems
      -System of systems
      
      
      Software engineering and the web 
      -------------------------------------
      -Web - platform for running applications
      -Web service allows applications functionalities to be acccessed over  the web
      -cloud computing is an approach to the provision of computer servces where applications run 
       remotely on the cloud
       -web-based systems - are complex distributed systems 
       
       
       
       Key points
       ------------------
       -Software engineering - is an engineering discipline that is concerned with all aspects 
        of software production.
       -essentially software products attributes  are maintainability, dependability and security,
       efficiency and acceptability.
       -The high-level activities of specification, development, validation and evolution are part of all software processes.
       
       -The fundamental notion of software engineering are universally applicable to all types of system development.
       -different types of systems requires appropriate software engineering tools and techniques for the
       development .
       
       software engineering ethics
       -------------------------------
       -responsibilities
       -honest
       -confidentiality
       -competence
       
       
       issues of professional responsibility 
       -------------------------------------------
       -Intellectual property right
       -Computer misuse.
       
         
        The software processs
       -------------------------
       -Set of activities required to develop a software sysytems
       -software process - 
                           specification
                           design and implementation
                           validation
                           Evalution
                           
                The waterfall model
                ---------------------
       Waterfall model phases
       --------------------------   
  -Requirements definition
  -System and software design
  -implementation and unit testing 
  -integration and system testing 
  -operation and maintenance.
  
  
  Drawbacks 
  ------------
  -Difficult in accodating changes  after the process is underway
  -in preciple, a phase has to be complete before moving onto the next.
  
  incremental benefits
  ------------------------------
  -Reduces cost of accommodating changing customer requirement.
  -Ease to get customer feedback.
  -more rapid devivery  and deployment of useful softare to the customer 
  
  
  incremental development problems
  -------------------------------------
  -the process is invisible
  -system stuctures tends  to degrade as new increments are added.
  
  
  reuse-oriented software engineering
  ---------------------------------------
  -process stages 
              -Component analysis
              -Requirement modifications
              -System design with reuse
              -Development and intergration.
              
              Reuse-oriented software engineering 
              -----------------------------------------
   -Requirement specification
   -component analysis
   -requirement modification
   -System design with reuse
   -Development and integration
   -system validation
   
   Process activities
   ----------------------
   -Real software processes are inter-leaved sequence of technical, collaborative and managerial activities.
   -with overal goal of specifying, designing, implementing, and testing a software system.
   
   
   
   
   software specifications
   -------------------------
   -The process of establishing what service are required and the constaints on the systems and development.
   
   Requirement engineering process
   ----------------------------------
   -Feasibility study.
   -Requirements elicitation and analysis.
   -Requirement specification
   -Requirement validation.
   
   
   the requirements engineering process
   -------------------------------------------
   -Feasibility study
   -Requirement elicity and analysis
   -requirment specifications
   -Requirment validation
   -Requirment documentation
   -users and system requirement.
   -System model
   -Feasibility report
   
   
   
   Software design and implementation
 -----------------------------------------
 -Process of converting the system specification into an executable system
 -software design - designing a software structure that realises the specification.
 -implementation - translate this structure into an executable program 
 
 
 The general model of the design  process
 --------------------------------------------
 -Design input
 -Design activities
 -Design output
 
 Design input
 -----------------
 -Platform information 
 -Requirement specification 
 -Data description
 
 
 Design activitiess
------------------
-Architectural design 
-interface design 
-component design 
-Database design

Design outputs
---------------------
-System architecture
-database specifications
-interface specification 
-component specification


Architectural design 
--------------------
-identifity the overal structure of the system.
-identifty the principal components, their relationships and how they are distributed.

interface design 
--------------------
-You define the interface between system componnents
  
  
component design 
-----------------
-Take each system component and design how it will operate.


Database design 
---------------
-design the system data  stucture and how these are to be reprented in a database.




Stages of testing 
---------------------
-component testing
-system testing
-acception testing



software evolution
-----------------------
-software is inherently flexible and can change.


General models
--------------------
-Describe the organisation of software processes.
they includes;
              -Waterfall model 
              -incremental developement
              -Reuse oriented developement.
              
              
              software prototyping 
         --------------------------------
 -Prototyping - initial version of a system used to demonstrate concepts and trying out design option.
 -used in 
          Requirement engineering process to help with requrements elicitation.
          in design process to expore option and develop a ui design 
          in testing process to test back to back tests.
          


importance of prototypes
 --------------------------------
 -improve system usability
 -A closer match to user's need
 -improve design quality
 -improved maintainability
 -Reduced development effort
 
 The process of protype development
 ---------------------------------------
 -Establish prototype  objectives -> prototyping plan
 -Define prototype functionalities ->  outline definition
 -Develop prototype -> Execute prototype
 -Evaluate protype -> Evaluate report
 
 Throw-away prototype
 ----------------------------
 -It may be imposible to tune the system to meet non-functional requirment
 -Protype are normally undocumented
 -The prototype structure is usually degraded through rapid change.
 -The prototype probability will not meet normal organisational  quality standards.
 
 -


Rational unified process
---------------------------
-A model generic process 
-Organised into phases:
                       inception
                       elaboration
                       construction
                       transition
                       
                       
                       
                       Agile methods
                       --------------------
  -Focus on the code rather than the design
  -Are based on an iterative approach to software developement
  -Are intended  to deliver working software quickly and evolve this quick to meet changing requirement.
  -it aims at reducing overheads in the software process(ie limiting documentation) and to
  be able to respond quickly to changing requirement without excepssive rework.
  
  Agile manifesto values
  ---------------------
  -Individuals and interactions over processes and tools
  -Working software over comprehensive documentation
  -customer collaboration over contract negotiation
  -Responding to change over  following a plan 
  
  principles of  agile methods
  ----------------------------
  -Customer involvement
  -Incremental delivery
  -people not process
  -Embrace change
  -Maintain simplicity
  


Extreme programming practices 
-------------------------------------
-Incremental planning
-Small relseases
-Simple design
-Test-fist development
-Refactoring
-pair programming
-colllective ownership
continuous intergrating 
-sustainable pace
-On-sete customer







